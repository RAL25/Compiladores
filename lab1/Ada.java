/* Ada.java */
/* Generated By:JavaCC: Do not edit this line. Ada.java */
import java.io.*;

public class Ada implements AdaConstants {
    public static void main(String[] args) throws ParseException, IOException{
        Ada lexical = new Ada(System.in);
        lexical.Input();
    }

  static final public void Input() throws ParseException {Token t;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ABORT:{
        //<MAIN> {System.out.println("main");}
                t = jj_consume_token(ABORT);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case ABS:{
        t = jj_consume_token(ABS);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case ABSTRACT:{
        t = jj_consume_token(ABSTRACT);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case ACCEPT:{
        t = jj_consume_token(ACCEPT);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case ACCESS:{
        t = jj_consume_token(ACCESS);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case ALIASED:{
        t = jj_consume_token(ALIASED);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case ALL:{
        t = jj_consume_token(ALL);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case AND:{
        t = jj_consume_token(AND);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case ARRAY:{
        t = jj_consume_token(ARRAY);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case AT:{
        t = jj_consume_token(AT);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case BEGIN:{
        t = jj_consume_token(BEGIN);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case BODY:{
        t = jj_consume_token(BODY);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case CASE:{
        t = jj_consume_token(CASE);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case CONSTANT:{
        t = jj_consume_token(CONSTANT);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case DECLARE:{
        t = jj_consume_token(DECLARE);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case DELAY:{
        t = jj_consume_token(DELAY);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case DELTA:{
        t = jj_consume_token(DELTA);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case DIGITS:{
        t = jj_consume_token(DIGITS);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case DO:{
        t = jj_consume_token(DO);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case ELSE:{
        t = jj_consume_token(ELSE);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case ELSIF:{
        t = jj_consume_token(ELSIF);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case END:{
        t = jj_consume_token(END);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case ENTRY:{
        t = jj_consume_token(ENTRY);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case EXCEPTION:{
        t = jj_consume_token(EXCEPTION);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case EXIT:{
        t = jj_consume_token(EXIT);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case FOR:{
        t = jj_consume_token(FOR);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case FUNCTION:{
        t = jj_consume_token(FUNCTION);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case GENERIC:{
        t = jj_consume_token(GENERIC);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case GOTO:{
        t = jj_consume_token(GOTO);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case IF:{
        t = jj_consume_token(IF);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case IN:{
        t = jj_consume_token(IN);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case IS:{
        t = jj_consume_token(IS);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case LIMITED:{
        t = jj_consume_token(LIMITED);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case LOOP:{
        t = jj_consume_token(LOOP);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case MOD:{
        t = jj_consume_token(MOD);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case NEW:{
        t = jj_consume_token(NEW);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case NOT:{
        t = jj_consume_token(NOT);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case NULL:{
        t = jj_consume_token(NULL);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case OF:{
        t = jj_consume_token(OF);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case OR:{
        t = jj_consume_token(OR);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case OTHERS:{
        t = jj_consume_token(OTHERS);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case OUT:{
        t = jj_consume_token(OUT);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case OVERRIDING:{
        t = jj_consume_token(OVERRIDING);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case PACKAGE:{
        t = jj_consume_token(PACKAGE);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case PRAGMA:{
        t = jj_consume_token(PRAGMA);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case PRIVATE:{
        t = jj_consume_token(PRIVATE);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case PROCEDURE:{
        t = jj_consume_token(PROCEDURE);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case PROTECTED:{
        t = jj_consume_token(PROTECTED);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case RAISE:{
        t = jj_consume_token(RAISE);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case RANGE:{
        t = jj_consume_token(RANGE);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case RECORD:{
        t = jj_consume_token(RECORD);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case REM:{
        t = jj_consume_token(REM);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case RETURN:{
        t = jj_consume_token(RETURN);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case REVERSE:{
        t = jj_consume_token(REVERSE);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case SELECT:{
        t = jj_consume_token(SELECT);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case SEPARATE:{
        t = jj_consume_token(SEPARATE);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case SOME:{
        t = jj_consume_token(SOME);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case SUBTYPE:{
        t = jj_consume_token(SUBTYPE);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case TAGGED:{
        t = jj_consume_token(TAGGED);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case TASK:{
        t = jj_consume_token(TASK);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case TERMINATE:{
        t = jj_consume_token(TERMINATE);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case THEN:{
        t = jj_consume_token(THEN);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case TYPE:{
        t = jj_consume_token(TYPE);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case UNTILL:{
        t = jj_consume_token(UNTILL);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case USE:{
        t = jj_consume_token(USE);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case WHEN:{
        t = jj_consume_token(WHEN);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case WHILE:{
        t = jj_consume_token(WHILE);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case WITH:{
        t = jj_consume_token(WITH);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case XOR:{
        t = jj_consume_token(XOR);
System.out.println("RESERVADO " + t.image);
        break;
        }
      case QUOTATION:{
        t = jj_consume_token(QUOTATION);
System.out.println("QUOTATION " + t.image);
        break;
        }
      case NUMBERSIGN:{
        t = jj_consume_token(NUMBERSIGN);
System.out.println("NUMBERSIGN " + t.image);
        break;
        }
      case AMPERSAND:{
        t = jj_consume_token(AMPERSAND);
System.out.println("AMPERSAND " + t.image);
        break;
        }
      case APOSTROPHE:{
        t = jj_consume_token(APOSTROPHE);
System.out.println("APOSTROPHE " + t.image);
        break;
        }
      case LPARENTHESIS:{
        t = jj_consume_token(LPARENTHESIS);
System.out.println("LPARENTHESIS " + t.image);
        break;
        }
      case RPARENTHESIS:{
        t = jj_consume_token(RPARENTHESIS);
System.out.println("RPARENTHESIS " + t.image);
        break;
        }
      case ASTERISK:{
        t = jj_consume_token(ASTERISK);
System.out.println("ASTERISK " + t.image);
        break;
        }
      case PLUS:{
        t = jj_consume_token(PLUS);
System.out.println("PLUS " + t.image);
        break;
        }
      case COMMA:{
        t = jj_consume_token(COMMA);
System.out.println("COMMA " + t.image);
        break;
        }
      case HYPHEN:{
        t = jj_consume_token(HYPHEN);
System.out.println("HYPHEN " + t.image);
        break;
        }
      case DOT:{
        t = jj_consume_token(DOT);
System.out.println("DOT " + t.image);
        break;
        }
      case ATSIGN:{
        t = jj_consume_token(ATSIGN);
System.out.println("ATSIGN " + t.image);
        break;
        }
      case COLON:{
        t = jj_consume_token(COLON);
System.out.println("COLON " + t.image);
        break;
        }
      case SEMICOLON:{
        t = jj_consume_token(SEMICOLON);
System.out.println("SEMICOLON " + t.image);
        break;
        }
      case LESSTHAN:{
        t = jj_consume_token(LESSTHAN);
System.out.println("LESSTHAN " + t.image);
        break;
        }
      case EQUALS:{
        t = jj_consume_token(EQUALS);
System.out.println("EQUALS " + t.image);
        break;
        }
      case GREATERTHAN:{
        t = jj_consume_token(GREATERTHAN);
System.out.println("GREATERTHAN " + t.image);
        break;
        }
      case UNDERLINE:{
        t = jj_consume_token(UNDERLINE);
System.out.println("UNDERLINE " + t.image);
        break;
        }
      case VERTICALLINE:{
        t = jj_consume_token(VERTICALLINE);
System.out.println("VERTICALLINE " + t.image);
        break;
        }
      case SOLIDUS:{
        t = jj_consume_token(SOLIDUS);
System.out.println("SOLIDUS " + t.image);
        break;
        }
      case EXCLAMATION:{
        t = jj_consume_token(EXCLAMATION);
System.out.println("EXCLAMATION " + t.image);
        break;
        }
      case PERCENT:{
        t = jj_consume_token(PERCENT);
System.out.println("PERCENT " + t.image);
        break;
        }
      case LSQUAREBRACKET:{
        t = jj_consume_token(LSQUAREBRACKET);
System.out.println("LSQUAREBRACKET " + t.image);
        break;
        }
      case RSQUAREBRACKET:{
        t = jj_consume_token(RSQUAREBRACKET);
System.out.println("RSQUAREBRACKET " + t.image);
        break;
        }
      case ID:{
        t = jj_consume_token(ID);
System.out.println("ID " + t.image);
        break;
        }
      case NUMBER:{
        t = jj_consume_token(NUMBER);
System.out.println("NUMBER " + t.image);
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case QUOTATION:
      case NUMBERSIGN:
      case AMPERSAND:
      case APOSTROPHE:
      case LPARENTHESIS:
      case RPARENTHESIS:
      case ASTERISK:
      case PLUS:
      case COMMA:
      case HYPHEN:
      case DOT:
      case ATSIGN:
      case COLON:
      case SEMICOLON:
      case LESSTHAN:
      case EQUALS:
      case GREATERTHAN:
      case UNDERLINE:
      case VERTICALLINE:
      case SOLIDUS:
      case EXCLAMATION:
      case PERCENT:
      case LSQUAREBRACKET:
      case RSQUAREBRACKET:
      case ABORT:
      case ABS:
      case ABSTRACT:
      case ACCEPT:
      case ACCESS:
      case ALIASED:
      case ALL:
      case AND:
      case ARRAY:
      case AT:
      case BEGIN:
      case BODY:
      case CASE:
      case CONSTANT:
      case DECLARE:
      case DELAY:
      case DELTA:
      case DIGITS:
      case DO:
      case ELSE:
      case ELSIF:
      case END:
      case ENTRY:
      case EXCEPTION:
      case EXIT:
      case FOR:
      case FUNCTION:
      case GENERIC:
      case GOTO:
      case IF:
      case IN:
      case IS:
      case LIMITED:
      case LOOP:
      case MOD:
      case NEW:
      case NOT:
      case NULL:
      case OF:
      case OR:
      case OTHERS:
      case OUT:
      case OVERRIDING:
      case PACKAGE:
      case PRAGMA:
      case PRIVATE:
      case PROCEDURE:
      case PROTECTED:
      case RAISE:
      case RANGE:
      case RECORD:
      case REM:
      case RETURN:
      case REVERSE:
      case SELECT:
      case SEPARATE:
      case SOME:
      case SUBTYPE:
      case TAGGED:
      case TASK:
      case TERMINATE:
      case THEN:
      case TYPE:
      case UNTILL:
      case USE:
      case WHEN:
      case WHILE:
      case WITH:
      case XOR:
      case NUMBER:
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public AdaTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	   jj_la1_init_3();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0xffffffe0,0xffffffe0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0xffffffff,0xffffffff,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0xffffffff,0xffffffff,};
	}
	private static void jj_la1_init_3() {
	   jj_la1_3 = new int[] {0xf,0xf,};
	}

  /** Constructor with InputStream. */
  public Ada(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Ada(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new AdaTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Ada(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new AdaTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new AdaTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Ada(AdaTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(AdaTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[126];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 2; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		   if ((jj_la1_3[i] & (1<<j)) != 0) {
			 la1tokens[96+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 126; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
