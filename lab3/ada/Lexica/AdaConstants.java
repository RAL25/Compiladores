/* Generated By:JavaCC: Do not edit this line. AdaConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface AdaConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int QUOTATION = 5;
  /** RegularExpression Id. */
  int NUMBERSIGN = 6;
  /** RegularExpression Id. */
  int AMPERSAND = 7;
  /** RegularExpression Id. */
  int APOSTROPHE = 8;
  /** RegularExpression Id. */
  int LPARENTHESIS = 9;
  /** RegularExpression Id. */
  int RPARENTHESIS = 10;
  /** RegularExpression Id. */
  int ASTERISK = 11;
  /** RegularExpression Id. */
  int PLUS = 12;
  /** RegularExpression Id. */
  int COMMA = 13;
  /** RegularExpression Id. */
  int HYPHEN = 14;
  /** RegularExpression Id. */
  int DOT = 15;
  /** RegularExpression Id. */
  int ATSIGN = 16;
  /** RegularExpression Id. */
  int COLON = 17;
  /** RegularExpression Id. */
  int SEMICOLON = 18;
  /** RegularExpression Id. */
  int LESSTHAN = 19;
  /** RegularExpression Id. */
  int EQUALS = 20;
  /** RegularExpression Id. */
  int GREATERTHAN = 21;
  /** RegularExpression Id. */
  int UNDERLINE = 22;
  /** RegularExpression Id. */
  int VERTICALLINE = 23;
  /** RegularExpression Id. */
  int SOLIDUS = 24;
  /** RegularExpression Id. */
  int EXCLAMATION = 25;
  /** RegularExpression Id. */
  int PERCENT = 26;
  /** RegularExpression Id. */
  int LSQUAREBRACKET = 27;
  /** RegularExpression Id. */
  int RSQUAREBRACKET = 28;
  /** RegularExpression Id. */
  int QUESTION = 29;
  /** RegularExpression Id. */
  int ARROW = 30;
  /** RegularExpression Id. */
  int DOUBLEDOT = 31;
  /** RegularExpression Id. */
  int EXPONENTIATE = 32;
  /** RegularExpression Id. */
  int ASSIGNMENT = 33;
  /** RegularExpression Id. */
  int INEQUALITY = 34;
  /** RegularExpression Id. */
  int GREATERTHANOREQUAL = 35;
  /** RegularExpression Id. */
  int LESSTHANOREQUAL = 36;
  /** RegularExpression Id. */
  int LEFTLABELBRACKET = 37;
  /** RegularExpression Id. */
  int RIGHTLABELBRACKET = 38;
  /** RegularExpression Id. */
  int BOX = 39;
  /** RegularExpression Id. */
  int INTEGER = 40;
  /** RegularExpression Id. */
  int FLOAT = 41;
  /** RegularExpression Id. */
  int LONGFLOAT = 42;
  /** RegularExpression Id. */
  int BOOLEAN = 43;
  /** RegularExpression Id. */
  int CHARACTER = 44;
  /** RegularExpression Id. */
  int ABORT = 45;
  /** RegularExpression Id. */
  int ABS = 46;
  /** RegularExpression Id. */
  int ABSTRACT = 47;
  /** RegularExpression Id. */
  int ACCEPT = 48;
  /** RegularExpression Id. */
  int ACCESS = 49;
  /** RegularExpression Id. */
  int ALIASED = 50;
  /** RegularExpression Id. */
  int ALL = 51;
  /** RegularExpression Id. */
  int AND = 52;
  /** RegularExpression Id. */
  int ARRAY = 53;
  /** RegularExpression Id. */
  int AT = 54;
  /** RegularExpression Id. */
  int BEGIN = 55;
  /** RegularExpression Id. */
  int BODY = 56;
  /** RegularExpression Id. */
  int CASE = 57;
  /** RegularExpression Id. */
  int CONSTANT = 58;
  /** RegularExpression Id. */
  int DECLARE = 59;
  /** RegularExpression Id. */
  int DELAY = 60;
  /** RegularExpression Id. */
  int DELTA = 61;
  /** RegularExpression Id. */
  int DIGITS = 62;
  /** RegularExpression Id. */
  int DO = 63;
  /** RegularExpression Id. */
  int ELSE = 64;
  /** RegularExpression Id. */
  int ELSIF = 65;
  /** RegularExpression Id. */
  int END = 66;
  /** RegularExpression Id. */
  int ENTRY = 67;
  /** RegularExpression Id. */
  int EXCEPTION = 68;
  /** RegularExpression Id. */
  int EXIT = 69;
  /** RegularExpression Id. */
  int FOR = 70;
  /** RegularExpression Id. */
  int FUNCTION = 71;
  /** RegularExpression Id. */
  int GENERIC = 72;
  /** RegularExpression Id. */
  int GOTO = 73;
  /** RegularExpression Id. */
  int IF = 74;
  /** RegularExpression Id. */
  int IN = 75;
  /** RegularExpression Id. */
  int IS = 76;
  /** RegularExpression Id. */
  int LIMITED = 77;
  /** RegularExpression Id. */
  int LOOP = 78;
  /** RegularExpression Id. */
  int MOD = 79;
  /** RegularExpression Id. */
  int NEW = 80;
  /** RegularExpression Id. */
  int NOT = 81;
  /** RegularExpression Id. */
  int NULL = 82;
  /** RegularExpression Id. */
  int OF = 83;
  /** RegularExpression Id. */
  int OR = 84;
  /** RegularExpression Id. */
  int OTHERS = 85;
  /** RegularExpression Id. */
  int OUT = 86;
  /** RegularExpression Id. */
  int OVERRIDING = 87;
  /** RegularExpression Id. */
  int PACKAGE = 88;
  /** RegularExpression Id. */
  int PRAGMA = 89;
  /** RegularExpression Id. */
  int PRIVATE = 90;
  /** RegularExpression Id. */
  int PROCEDURE = 91;
  /** RegularExpression Id. */
  int PROTECTED = 92;
  /** RegularExpression Id. */
  int RAISE = 93;
  /** RegularExpression Id. */
  int RANGE = 94;
  /** RegularExpression Id. */
  int RECORD = 95;
  /** RegularExpression Id. */
  int REM = 96;
  /** RegularExpression Id. */
  int RETURN = 97;
  /** RegularExpression Id. */
  int REVERSE = 98;
  /** RegularExpression Id. */
  int SELECT = 99;
  /** RegularExpression Id. */
  int SEPARATE = 100;
  /** RegularExpression Id. */
  int SOME = 101;
  /** RegularExpression Id. */
  int SUBTYPE = 102;
  /** RegularExpression Id. */
  int TAGGED = 103;
  /** RegularExpression Id. */
  int TASK = 104;
  /** RegularExpression Id. */
  int TERMINATE = 105;
  /** RegularExpression Id. */
  int THEN = 106;
  /** RegularExpression Id. */
  int TYPE = 107;
  /** RegularExpression Id. */
  int UNTILL = 108;
  /** RegularExpression Id. */
  int USE = 109;
  /** RegularExpression Id. */
  int WHEN = 110;
  /** RegularExpression Id. */
  int WHILE = 111;
  /** RegularExpression Id. */
  int WITH = 112;
  /** RegularExpression Id. */
  int XOR = 113;
  /** RegularExpression Id. */
  int NUMBER = 114;
  /** RegularExpression Id. */
  int ID = 115;
  /** RegularExpression Id. */
  int a = 116;
  /** RegularExpression Id. */
  int b = 117;
  /** RegularExpression Id. */
  int c = 118;
  /** RegularExpression Id. */
  int d = 119;
  /** RegularExpression Id. */
  int e = 120;
  /** RegularExpression Id. */
  int f = 121;
  /** RegularExpression Id. */
  int g = 122;
  /** RegularExpression Id. */
  int h = 123;
  /** RegularExpression Id. */
  int i = 124;
  /** RegularExpression Id. */
  int j = 125;
  /** RegularExpression Id. */
  int k = 126;
  /** RegularExpression Id. */
  int l = 127;
  /** RegularExpression Id. */
  int m = 128;
  /** RegularExpression Id. */
  int n = 129;
  /** RegularExpression Id. */
  int o = 130;
  /** RegularExpression Id. */
  int p = 131;
  /** RegularExpression Id. */
  int q = 132;
  /** RegularExpression Id. */
  int r = 133;
  /** RegularExpression Id. */
  int s = 134;
  /** RegularExpression Id. */
  int t = 135;
  /** RegularExpression Id. */
  int u = 136;
  /** RegularExpression Id. */
  int v = 137;
  /** RegularExpression Id. */
  int w = 138;
  /** RegularExpression Id. */
  int x = 139;
  /** RegularExpression Id. */
  int y = 140;
  /** RegularExpression Id. */
  int z = 141;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\\"\"",
    "\"#\"",
    "\"&\"",
    "\"\\\'\"",
    "\"(\"",
    "\")\"",
    "\"*\"",
    "\"+\"",
    "\",\"",
    "\"-\"",
    "\".\"",
    "\"@\"",
    "\":\"",
    "\";\"",
    "\"<\"",
    "\"=\"",
    "\">\"",
    "\"_\"",
    "\"|\"",
    "\"/\"",
    "\"!\"",
    "\"%\"",
    "\"[\"",
    "\"]\"",
    "\"?\"",
    "\"=>\"",
    "\"..\"",
    "\"**\"",
    "\":=\"",
    "\"/=\"",
    "\">=\"",
    "\"<=\"",
    "\"<<\"",
    "\">>\"",
    "\"<>\"",
    "<INTEGER>",
    "<FLOAT>",
    "<LONGFLOAT>",
    "<BOOLEAN>",
    "<CHARACTER>",
    "<ABORT>",
    "<ABS>",
    "<ABSTRACT>",
    "<ACCEPT>",
    "<ACCESS>",
    "<ALIASED>",
    "<ALL>",
    "<AND>",
    "<ARRAY>",
    "<AT>",
    "<BEGIN>",
    "<BODY>",
    "<CASE>",
    "<CONSTANT>",
    "<DECLARE>",
    "<DELAY>",
    "<DELTA>",
    "<DIGITS>",
    "<DO>",
    "<ELSE>",
    "<ELSIF>",
    "<END>",
    "<ENTRY>",
    "<EXCEPTION>",
    "<EXIT>",
    "<FOR>",
    "<FUNCTION>",
    "<GENERIC>",
    "<GOTO>",
    "<IF>",
    "<IN>",
    "<IS>",
    "<LIMITED>",
    "<LOOP>",
    "<MOD>",
    "<NEW>",
    "<NOT>",
    "<NULL>",
    "<OF>",
    "<OR>",
    "<OTHERS>",
    "<OUT>",
    "<OVERRIDING>",
    "<PACKAGE>",
    "<PRAGMA>",
    "<PRIVATE>",
    "<PROCEDURE>",
    "<PROTECTED>",
    "<RAISE>",
    "<RANGE>",
    "<RECORD>",
    "<REM>",
    "<RETURN>",
    "<REVERSE>",
    "<SELECT>",
    "<SEPARATE>",
    "<SOME>",
    "<SUBTYPE>",
    "<TAGGED>",
    "<TASK>",
    "<TERMINATE>",
    "<THEN>",
    "<TYPE>",
    "<UNTILL>",
    "<USE>",
    "<WHEN>",
    "<WHILE>",
    "<WITH>",
    "<XOR>",
    "<NUMBER>",
    "<ID>",
    "<a>",
    "<b>",
    "<c>",
    "<d>",
    "<e>",
    "<f>",
    "<g>",
    "<h>",
    "<i>",
    "<j>",
    "<k>",
    "<l>",
    "<m>",
    "<n>",
    "<o>",
    "<p>",
    "<q>",
    "<r>",
    "<s>",
    "<t>",
    "<u>",
    "<v>",
    "<w>",
    "<x>",
    "<y>",
    "<z>",
  };

}
